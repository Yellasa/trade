package com.liantuo.deposit.accountForbidTrade.mapper;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import java.util.List;
import org.junit.Test;
import org.unitils.database.annotations.Transactional;
import org.unitils.database.util.TransactionMode;
import org.unitils.dbunit.annotation.DataSet;
import org.unitils.spring.annotation.SpringBean;
import com.liantuo.deposit.advanceaccount.orm.mapper.AccountForbidTradeMapper;
import com.liantuo.deposit.advanceaccount.orm.pojo.AccountForbidTrade;
import com.liantuo.unittest.BaseDaoTest;


@Transactional(value = TransactionMode.ROLLBACK)
@DataSet(value = { "AccountForbidTrade.AccountForbidMapper.xls" })
public class AccountForbidMapperTest extends BaseDaoTest{
	
	@SpringBean("accountForbidTradeMapper")
	private AccountForbidTradeMapper accountForbidTradeMapper;
	
	@Test
	public void selectByPrimaryKey(){
		int key =6;
		AccountForbidTrade vo = accountForbidTradeMapper.selectByPrimaryKey(key);
		System.out.println(vo.getAccountNo()+"-----------");
		assertNotNull(vo);
	}
	
	@Test
	public void selectWhetherForbidThisTrade(){
		AccountForbidTrade vo = new AccountForbidTrade();
		vo.setAccountNo("CA21000000016956");
		vo = accountForbidTradeMapper.selectWhetherForbidThisTrade(vo);
		assertNull(vo);
	}
	@Test
	public void selectWhetherForbidThisTrade2(){
		AccountForbidTrade vo = new AccountForbidTrade();
		vo.setAccountNo("CA21000000016956");
		vo.setForbidCode("0003_001_001");
		vo = accountForbidTradeMapper.selectWhetherForbidThisTrade(vo);
		assertNull(vo);
	}
	@Test
	public void selectWhetherForbidThisTrade3(){
		AccountForbidTrade vo = new AccountForbidTrade();
		vo.setAccountNo("CA21000000016956");
		vo.setForbidCode("0003_001_001");
		vo.setType("02");
		vo = accountForbidTradeMapper.selectWhetherForbidThisTrade(vo);
		assertNotNull(vo);
	}
	@Test
	public void selectByAccouNo(){
		List<AccountForbidTrade> list = accountForbidTradeMapper.selectByAccouNo("CA21000000016752");
		System.out.println(list.size()+"***********");
		assertNotNull(list);
	}
	@Test
	public void selectByCAAndForbidCode(){
		AccountForbidTrade record = new AccountForbidTrade();
		record.setAccountNo("CA21000000016752");
		List<AccountForbidTrade>  list = accountForbidTradeMapper.selectByCAAndForbidCode(record);
		assertEquals("list大小",0,list.size());
	}
	
	@Test
	public void selectByCAAndForbidCode2(){
		AccountForbidTrade record = new AccountForbidTrade();
		record.setAccountNo("CA21000000016752");
		record.setForbidCode("0007_001");
		List<AccountForbidTrade>  list = accountForbidTradeMapper.selectByCAAndForbidCode(record);
		assertNotNull(list);
	}
	
	@Test
	public void insert(){
		int count=999999;
		AccountForbidTrade record = new AccountForbidTrade();
		record.setId(count);
		record.setAccountNo("CA21000000016752");
		record.setForbidCode("0007_001");
		record.setType("01");
		int a = accountForbidTradeMapper.insert(record);
		assertEquals("插入成功返回应该为1",1,a);
		
	}
	@Test
	public void deleteByPrimaryKey(){
		int a=  accountForbidTradeMapper.deleteByPrimaryKey(7);
		assertEquals("插入成功返回应该为1",1,a);
	}
}
