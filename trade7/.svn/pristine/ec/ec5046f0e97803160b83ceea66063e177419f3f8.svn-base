package com.liantuo.trade.bus.template;

import com.liantuo.payment.client.pay.PaymentNotify;
import com.liantuo.trade.client.trade.packet.TradePaymentAsyNotifyPacket;
import com.liantuo.trade.client.trade.packet.TradeRequest;
import com.liantuo.trade.client.trade.packet.TradeResponse;
import com.liantuo.trade.client.trade.packet.body.TradeRequestBody;
import com.liantuo.trade.common.constants.TradeConstants;
import com.liantuo.trade.common.message.MessageBundleService;
import com.liantuo.trade.common.util.json.ObjectJsonUtil;
import com.liantuo.trade.common.validate.Format;
import com.liantuo.trade.common.validate.Required;
import com.liantuo.trade.common.validate.ValidationUtil;
import com.liantuo.trade.exception.BusinessException;
import com.liantuo.trade.exception.BusinessUncheckedException;
import com.liantuo.trade.orm.pojo.TradeReqLog;

import org.apache.commons.lang3.StringUtils;
import org.springframework.aop.support.AopUtils;

import javax.annotation.Resource;
import javax.xml.bind.JAXBException;

import java.lang.reflect.Constructor;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.Map;

//import com.ebill.framework.res.BeanUtils;

/**
 * 抽象模板
 * 
 * @author dengchao
 * 
 */
public abstract class AbstractTradeNotifyTemplate<P>{
	private static Map<Class,Class> bodyClass = new HashMap<Class,Class>();
	@Resource(name = "messageBundleServiceImpl")
	private MessageBundleService messageBundleService;
	private String ip;
	protected P process;
	public void setProcess(P p){
		process = p;
	}
	public abstract void execute(PaymentNotify notify)
			throws Exception;
	public String getIp(){
		return ip;
	}
	public void setIp(String ip){
		this.ip = ip;
	}



	public Class getBodyClass() {
		if(bodyClass.get(process.getClass()) == null){
			Class bodyGenType = getGenericType(process.getClass());
			bodyClass.put(process.getClass(), bodyGenType);
			return bodyGenType;
		}else{
			return bodyClass.get(process.getClass());
		}
		
	}
	@SuppressWarnings("rawtypes")
	private Class<?> getGenericType(Class<?> clazz){
		Type genType = null;
		if(clazz.getGenericInterfaces().length == 0 || clazz.getGenericInterfaces().length > 1){
			return getGenericType(clazz.getSuperclass());
		}else{
			genType = clazz.getGenericInterfaces()[0];
			Type[] params = ((ParameterizedType) genType)
					.getActualTypeArguments();
			return (Class)params[0];
		}
	}




	protected final String getInternalFailureCode(String key) {
		return this.messageBundleService.getCode(key);
	}

	protected final String getInternalFailureMessage(String key, Object... objs) {
		//MessageFormat.format(messageBundleService.getMessage(key),objs);
		return this.messageBundleService.getMessage(key, objs);
	}



	
}
