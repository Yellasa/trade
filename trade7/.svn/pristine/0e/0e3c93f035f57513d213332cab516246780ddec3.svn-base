/**
 *  实时账务处理四种业务正常流程
 *  case1:并发测试加锁
 *  
 */

package com.liantuo.deposit.advanceaccount.bus.service.impl;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.AbstractTransactionalJUnit4SpringContextTests;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.test.context.transaction.TransactionConfiguration;
import com.liantuo.deposit.advanceaccount.bus.service.AdvanceAccountService;
import com.liantuo.deposit.advanceaccount.bus.vo.RealTimeAccountingRsp;
import com.liantuo.deposit.advanceaccount.bus.vo.RealTimeAccountingVo;
import com.liantuo.trade.exception.BusinessUncheckedException;


@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations = { "classpath:config/spring/applicationContext-myBatis.xml","classpath:config/spring/applicationContext-common.xml", "classpath:config/spring/applicationContext-template.xml" })
@TransactionConfiguration(defaultRollback = false)
public class FixedThreadPoolTest extends AbstractTransactionalJUnit4SpringContextTests {
	
	private static final Logger LOGGER = LoggerFactory.getLogger(RealTimeFoursNormalCaseTest.class);
 
	//case1
	@Test
	public void testRealTimeAccounting() {
		int count=10;
		ExecutorService executorService = Executors.newFixedThreadPool(count);	
		 for (int i = 0; i < count; i++)
			 executorService.execute(new FixedThreadPoolTest().new Task());
		 executorService.shutdown();  
         while (!executorService.isTerminated()) {  
              try {  
                   Thread.sleep(10);  
              } catch (InterruptedException e) {  
                   e.printStackTrace();  
              }  
         }

	}
	
	
	@RunWith(SpringJUnit4ClassRunner.class)
	@ContextConfiguration(locations = { "classpath:config/spring/applicationContext-myBatis.xml","classpath:config/spring/applicationContext-common.xml", "classpath:config/spring/applicationContext-template.xml" })
	@TransactionConfiguration(defaultRollback = false)
    public class Task extends AbstractTransactionalJUnit4SpringContextTests  implements Runnable{  
    	@Autowired
        private AdvanceAccountService advanceAccountService;
        @Override  
        public void run() {  
             try {  
         		List<RealTimeAccountingVo> list = new ArrayList<RealTimeAccountingVo>();
        		List<RealTimeAccountingRsp> rsp = new ArrayList<RealTimeAccountingRsp>();
        		try {
        			RealTimeAccountingVo vo = new RealTimeAccountingVo();
        			vo.setAccountNo("CA21000000019141");
        			vo.setCoreMerchantNo("ebillmaster");
        			vo.setPoolNo("PN01000000000003124");
        			vo.setReservedFields5("可用金额减少1.55块钱");
        			vo.setTradeCode("0001_001");
        			vo.setTradeNo("456");
        			vo.setTradeGmtCreated(new Date());
        			vo.setRmk("备注");
        			vo.setTradeReqCode("0001_001_001");
        			vo.setTradeStepNo("201512341513");
        			vo.setSequenceNo("201512281115");
        			vo.setAvlBalDecrAmt(Long.valueOf(1550000));//前置的100万相当于账务1块
        			list.add(vo);
        			
        			RealTimeAccountingVo vo2 = new RealTimeAccountingVo();
        			vo2.setAccountNo("CA08081910137000");
        			vo2.setCoreMerchantNo("SHYF");
        			vo2.setPoolNo("PN01000000000000872");
        			vo2.setReservedFields4("可用金额增加11.1块");
        			vo2.setReservedFields2("预留2");
        			vo2.setTradeCode("0001_001");
        			vo2.setTradeNo("849678");
        			vo2.setTradeGmtCreated(new Date());
        			vo2.setRmk("备注");
        			vo2.setTradeReqCode("0001_001_001");
        			vo2.setTradeStepNo("12345907654");
        			vo2.setSequenceNo("201512282222");
        			vo2.setAvlBalIncrAmt(Long.valueOf(11100000)); 
        			list.add(vo2);
        			rsp = advanceAccountService.realTimeAccounting(list);
        			
        		} catch (BusinessUncheckedException e) {
        			LOGGER.error(e.getMessage());
        		}
             } catch (Exception e) {  
                  e.printStackTrace();  
             }  
        }  
   } 
}
