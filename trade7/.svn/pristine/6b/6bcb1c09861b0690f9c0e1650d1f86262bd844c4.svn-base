package com.liantuo.trade.bus.template.impl.v1_1;

import java.util.Date;

import javax.annotation.Resource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.liantuo.payment.client.pay.PaymentNotify;
import com.liantuo.trade.bus.process.TradeOnlineAsynPaymentNotifyInterface;
import com.liantuo.trade.bus.process.TradeState;
import com.liantuo.trade.bus.template.AbstractTradeNotifyTemplate;
import com.liantuo.trade.client.trade.packet.body.TradeNotifyRequestPacket;
import com.liantuo.trade.common.annotation.Template;
import com.liantuo.trade.common.constants.TradeConstants;
import com.liantuo.trade.exception.BusinessException;
import com.liantuo.trade.orm.pojo.TradeNotifyPaymentLogWithBLOBs;
import com.liantuo.trade.orm.pojo.TradeOutFrontLogWithBLOBs;
import com.liantuo.trade.orm.service.TradeNotifyPaymentLogService;
import com.liantuo.trade.orm.service.TradeOutFrontLogService;
import com.liantuo.trade.seqno.StepSequenceFactoryForSpdb;

@Template
public class ATradeOnlineAsynPaymentNotifyTemp extends AbstractTradeNotifyTemplate<TradeOnlineAsynPaymentNotifyInterface> {
	private final Logger logger = LoggerFactory.getLogger(ATradeOnlineAsynPaymentNotifyTemp.class);

	@Resource(name = "tradeNotifyPaymentLogServiceImpl")
	private TradeNotifyPaymentLogService tradeNotifyPaymentLogServiceImpl;
	@Resource(name = "tradeOutFrontLogServiceImpl")
	private TradeOutFrontLogService tradeOutFrontLogServiceImpl;
	@Resource(name = "idFactoryTradeOutFrontLogNo")
	private StepSequenceFactoryForSpdb idFactoryTradeOutFrontLogNo;
	protected TradeNotifyPaymentLogWithBLOBs tradeLog;

	private TradeOutFrontLogWithBLOBs tradeoutFrontLog;

	@Override
	public void execute(PaymentNotify notify) throws Exception {
		// TODO Auto-generated method stub
		try {
			// 1.记录异步通知请求的数据
			TradeNotifyRequestPacket tradeReq = process.setRequestDetail(notify, getIp());
			String serviceName = process.getServiceName();
			tradeLog = tradeNotifyPaymentLogServiceImpl.insertTradeNotifyPaymentLog(tradeReq, serviceName);// 插入支付中心异步通知给交易中心的日志log
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("插入请求日志异常", e);
		}
		// 2.根据空白台账解析是否找到对应的渠道流程信息
		Date startTime = new Date();
		try {
			process.validateClearChannel(notify);
		} catch (BusinessException e) {
			e.printStackTrace();
			try {
				tradeNotifyPaymentLogServiceImpl.updateTradeNotifyPaymentLog(tradeLog.getId(), TradeConstants.TRADE_RESPONSE_STATUS_FAILURE, e.getErrorCode(), startTime);// 部分更新支付中心异步通知交易中心的日志log
			} catch (Exception e0) {
				e0.printStackTrace();
			}
			return;
		}
		// 3.根据渠道编号解析对应的渠道接收对象
		try {
			process.parsePaymentNotify(notify);
		} catch (BusinessException e) {
			e.printStackTrace();
			try {
				tradeNotifyPaymentLogServiceImpl.updateTradeNotifyPaymentLog(tradeLog.getId(), TradeConstants.TRADE_RESPONSE_STATUS_FAILURE, e.getErrorCode(), startTime);// 部分更新支付中心异步通知交易中心的日志log
			} catch (Exception e0) {
				e0.printStackTrace();
			}
			return;
		}
		// 4.入口校验
		try {
			process.validate(process.getTradeRequest());// 验证处理(格式，业务)，并将解析后的实体类进行赋值以便下一步处理
		} catch (BusinessException e) {
			e.printStackTrace();
			try {
				tradeNotifyPaymentLogServiceImpl.updateTradeNotifyPaymentLog(tradeLog.getId(), TradeConstants.TRADE_RESPONSE_STATUS_FAILURE, e.getErrorCode(), startTime);// 部分更新支付中心异步通知交易中心的日志log
			} catch (Exception e0) {
				e0.printStackTrace();
			}
			return;
		}
		// 5.判断支付状态
		TradeState state = process.getTradePaymentStatus();
		
		switch (state) {
		case SUCCESS:// 5-1如果支付成功
			try {
				//5-1-1第一个等待入账的事物
				process.transactionReceipt(process.getTradeRequest());
			} catch (BusinessException e) {
				e.printStackTrace();
				try {
					tradeNotifyPaymentLogServiceImpl.updateTradeNotifyPaymentLog(tradeLog.getId(), TradeConstants.TRADE_RESPONSE_STATUS_FAILURE, e.getErrorCode(), startTime);// 部分更新支付中心异步通知交易中心的日志log
				} catch (Exception e0) {
					e0.printStackTrace();
				}
				return;
			} catch (Exception e) {
				try {
					tradeNotifyPaymentLogServiceImpl.updateTradeNotifyPaymentLog(tradeLog.getId(), TradeConstants.TRADE_RESPONSE_STATUS_FAILURE, TradeConstants.TRAED_SYSTEM_ERROR, startTime);// 部分更新支付中心异步通知交易中心的日志log
				} catch (Exception e0) {
					e0.printStackTrace();
				}
				return;
			}
			try {
				//// 执行第二步事务(账务处理)
				process.transactionEntry(process.getTradeRequest());
				// 组织成功报文用于后续向前置发送通知
				process.getNotifyFrontDetailsInfo(TradeConstants.TRADE_RESPONSE_STATUS_SUCCESS, "", "");
			} catch (BusinessException e) {
				// 组织失败报文用于后续向前置发送通知
				process.getNotifyFrontDetailsInfo(TradeConstants.TRADE_RESPONSE_STATUS_FAILURE, e.getErrorCode(), e.getErrorMessage());
				break;
			} catch (Exception e) {
				// 组织失败报文用于后续向前置发送通知
				process.getNotifyFrontDetailsInfo(TradeConstants.TRADE_RESPONSE_STATUS_FAILURE, TradeConstants.TRAED_SYSTEM_ERROR, e.getMessage());
			}
			break;
		case FAILURE:
			try{  
        		process.transactionFailure(process.getTradeRequest());//支付失败处理
        		//TODO 组织失败报文用于后续向前置发送通知 需要确认相关的错误吗和错误信息
        		process.getNotifyFrontDetailsInfo(TradeConstants.TRADE_RESPONSE_STATUS_FAILURE,
				        				process.getFailureMessage().getReason(),
				        				process.getFailureMessage().getReason_commont());
        		
        	}catch(BusinessException e){
                 try{
                 	tradeNotifyPaymentLogServiceImpl.updateTradeNotifyPaymentLog(tradeLog.getId(),TradeConstants.TRADE_RESPONSE_STATUS_FAILURE,e.getErrorCode(),startTime);//部分更新支付中心异步通知交易中心的日志log
                 } catch (Exception e0) {
                     e0.printStackTrace();
                 }
                return ;
        	}catch(Exception e){
        		 try{
                  	tradeNotifyPaymentLogServiceImpl.updateTradeNotifyPaymentLog(tradeLog.getId(),TradeConstants.TRADE_RESPONSE_STATUS_FAILURE,TradeConstants.TRAED_SYSTEM_ERROR,startTime);//部分更新支付中心异步通知交易中心的日志log
                  } catch (Exception e0) {
                      e0.printStackTrace();
                  }
                 return ;
        	}
        	break;
		case UNKNOWN:
			try {
				//TODO 获取状态不明的错误码 需要讨论
				String unknownErrorCode = process.getUnknownErrorCode();
				tradeNotifyPaymentLogServiceImpl.updateTradeNotifyPaymentLog(tradeLog.getId(), TradeConstants.TRADE_RESPONSE_STATUS_UNKNOWN, unknownErrorCode, startTime);
			} catch (Exception e0) {
				e0.printStackTrace();
			}
			return ;
		}
		 //新增交易发送通知到前置的日志记录
		try {
			tradeOutFrontLogServiceImpl.insertTradeOutFrontLog(process.prepareTradeOutFrontLog());
		} catch (Exception e) {
			e.printStackTrace();
		}
		try {
			// 用前面组织好的报文通过MQ向前置发送通知 发送完成之后，写日志
			logger.info("支付中心异步通知交易中心交易结果--开始发送mq异步消息到前置");
			process.notifyFront(process.getNotice());
		} catch (Exception e1) {
			logger.info("支付中心异步通知交易中心交易结果---异步通知前置失败");
			try {
				tradeNotifyPaymentLogServiceImpl.updateTradeNotifyPaymentLog(tradeLog.getId(), TradeConstants.TRADE_RESPONSE_STATUS_SUCCESS, TradeConstants.TRAED_SYSTEM_ERROR, startTime);// 部分更新支付中心异步通知交易中心的日志log
			} catch (Exception e0) {
				e0.printStackTrace();
			}
			return;
		}
		//记录mq通知前置中心成功
		try {
			tradeOutFrontLogServiceImpl.updateTradeOutFrontLog(process.updateTradeOutFrontLog(tradeoutFrontLog.getId()));
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	 
}
