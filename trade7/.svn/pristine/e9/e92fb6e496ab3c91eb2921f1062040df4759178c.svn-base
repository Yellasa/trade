package com.liantuo.deposit.pool.processor.v1;

import static org.junit.Assert.*;

import java.util.Map;
import java.util.HashMap;

import org.junit.Before;
import org.junit.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.test.util.ReflectionTestUtils;
import org.unitils.spring.annotation.SpringBean;

import com.alibaba.fastjson.JSON;
import com.liantuo.deposit.advanceaccount.orm.pojo.Pool;
import com.liantuo.deposit.advanceaccount.web.vo.queryvo.PoolQueryVo;
import com.liantuo.deposit.advanceaccount.web.vo.rsp.PoolRspVo;
import com.liantuo.deposit.common.constants.errorcode.ErrorCode005Constants;
import com.liantuo.deposit.pool.bus.service.PoolService;
import com.liantuo.deposit.pool.bus.service.PoolServiceMock;
import com.liantuo.deposit.pool.processor.v1.vo.CreatePoolReqVO;
import com.liantuo.deposit.pool.processor.v1.vo.CreatePoolRspVO;
import com.liantuo.trade.seqno.StepSequenceFactoryForSpdb;
import com.liantuo.trade.seqno.StepSequenceFactoryForSpdbMock;
import com.liantuo.unittest.BaseProcessorTest;
import com.liantuo.unittest.mockito.IsTClass;

import static org.mockito.Mockito.*;

public class CreatePoolProcessorTest extends BaseProcessorTest {

	@SpringBean("dep_0_005_1.0")
	private CreatePoolProcessor createPoolProcessor;

	private PoolService poolService;
	private StepSequenceFactoryForSpdb idFactoryPoolNo;

	@Before
	public void init() {
		poolService = mock(PoolService.class);
		idFactoryPoolNo = mock(StepSequenceFactoryForSpdb.class);
		ReflectionTestUtils.setField(createPoolProcessor, "poolService",
				poolService);
		ReflectionTestUtils.setField(createPoolProcessor, "idFactoryPoolNo",
				idFactoryPoolNo);
	}

	@Test
	public void testBizProcess() {
		Pool record = new Pool();
		
		PoolServiceMock.mockCreatePool(poolService, record);		
		StepSequenceFactoryForSpdbMock.mockGenerate(idFactoryPoolNo, "123456");

		CreatePoolReqVO req = new CreatePoolReqVO("123456", "123456",
				"12345678901234567", "123456");

		CreatePoolRspVO rsp = (CreatePoolRspVO) createPoolProcessor
				.bizProcess(req);

		verify(poolService, times(1)).createPool(
				argThat(new IsTClass<Pool>(record)));
		verify(idFactoryPoolNo, times(1)).generate();
		
		LOGGER.info("接口返回结果：{}", JSON.toJSONString(rsp));

		assertNotNull("创建资金池返回结果应该为非空！", rsp);
		assertEquals("创建资金池返回结果success错误！", "S",rsp.getSuccess());
	}

	@Test
	public void testBizValidateSuccess() {

		CreatePoolReqVO req = new CreatePoolReqVO("123456", "123456",
				"12345678901234567", "123456");

		doReturn(null).when(poolService).findByMerchantNoAndPoolName(
				argThat(new IsTClass<PoolQueryVo>(new PoolQueryVo())));

		CreatePoolRspVO rsp = (CreatePoolRspVO) createPoolProcessor
				.bizValidate(req);

		verify(poolService, times(1)).findByMerchantNoAndPoolName(
				argThat(new IsTClass<PoolQueryVo>(new PoolQueryVo())));
		LOGGER.info("接口返回结果：{}", JSON.toJSONString(rsp));
		assertNull("创建资金池业务验证应该通过！", rsp);
	}

	@Test
	public void testBizValidateFail() {

		CreatePoolReqVO req = new CreatePoolReqVO("123456", "123456",
				"12345678901234567", "123456");

		doReturn(new PoolRspVo()).when(poolService)
				.findByMerchantNoAndPoolName(
						argThat(new IsTClass<PoolQueryVo>(new PoolQueryVo())));

		CreatePoolRspVO rsp = (CreatePoolRspVO) createPoolProcessor
				.bizValidate(req);

		verify(poolService, times(1)).findByMerchantNoAndPoolName(
				argThat(new IsTClass<PoolQueryVo>(new PoolQueryVo())));

		LOGGER.info("接口返回结果：{}", JSON.toJSONString(rsp));
		assertNotNull("创建资金池业务验证应该失败！", rsp);
		assertNull("创建资金池返回结果Pool对象应该为空！", rsp.getPool());
		assertEquals("创建资金池资金池名称重复返回结果retCode错误", ErrorCode005Constants.POOL_OPEN_NAME_REPEAT, rsp.getRetCode());
		assertEquals("创建资金池资金池名称重复返回结果retInfo错误", "资金池名称重复", rsp.getRetInfo());
		assertEquals("请求参数转换结果创建资金池资金池名称重复返回结果success错误池编号错误", "F", rsp.getSuccess());
		
	}

	@Test
	public void testConvertNull() {
		CreatePoolReqVO req = createPoolProcessor.convert(null);
		assertNull("请求参数转换结果应该是空", req);
	}

	@Test
	public void testConvertErrorKey() {
		CreatePoolReqVO req = createPoolProcessor
				.convert(new HashMap<String, String>());
		assertNotNull("请求参数转换结果应该是非空", req);
		assertNull("请求参数转换结果核心商户编号应该是空", req.getCoreMerchantNo());
		assertNull("请求参数转换结果商户合作号应该是空", req.getPartnerId());
		assertNull("请求参数转换结果资金池编号应该是空", req.getPoolName());
		assertNull("请求参数转换结果备注应该是空", req.getRmk());
	}

	@Test
	public void testConvertAllKeyNotNull() {
		Map<String, String> param = new HashMap<String, String>();
		param.put("coreMerchantNo", "1234123");
		param.put("poolName", "1234123");
		param.put("partnerId", "1234123");
		param.put("rmk", "1234123");
		CreatePoolReqVO req = createPoolProcessor.convert(param);

		assertNotNull("请求参数转换结果应该是非空", req);
		assertEquals("请求参数转换结果核心商户编号错误", "1234123", req.getCoreMerchantNo());
		assertEquals("请求参数转换结果商户合作号错误", "1234123", req.getPartnerId());
		assertEquals("请求参数转换结果资金池编号错误", "1234123", req.getPoolName());
		assertEquals("请求参数转换结果备注错误", "1234123", req.getRmk());

	}

	private static final Logger LOGGER = LoggerFactory
			.getLogger(CreatePoolProcessorTest.class);
}
