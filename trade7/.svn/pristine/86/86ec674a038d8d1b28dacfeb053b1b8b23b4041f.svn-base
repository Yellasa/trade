package com.liantuo.trade.bus.service.impl;

import java.util.Date;

import javax.annotation.Resource;

import org.springframework.beans.BeanUtils;
import org.springframework.stereotype.Component;

import com.alibaba.druid.util.StringUtils;
import com.liantuo.trade.bus.service.ProfitLossLedgerService;
import com.liantuo.trade.common.constants.TradeConstants;
import com.liantuo.trade.common.util.trade.TradeUtilCommon;
import com.liantuo.trade.orm.pojo.TradeLedger;
import com.liantuo.trade.orm.pojo.TradeLedgerLog;
import com.liantuo.trade.orm.pojo.TradeProfitLossLedger;
import com.liantuo.trade.orm.pojo.TradeProfitLossLedgerExample;
import com.liantuo.trade.orm.pojo.TradeProfitLossLedgerLog;
import com.liantuo.trade.orm.service.TradeProfitLossLedgerLogService;
import com.liantuo.trade.orm.service.TradeProfitLossLedgerService;
import com.liantuo.trade.seqno.IdFactory;

@Component(value = "profitLossLedgerServiceImpl")
public class ProfitLossLedgerServiceImpl implements ProfitLossLedgerService {
	private final static int VERSION = 0;
	@Resource
	private TradeProfitLossLedgerService tradeProfitLossLedgerService;
	@Resource
	private TradeProfitLossLedgerLogService tradeProfitLossLedgerLogService;

	@Resource(name = "idFactoryTradeLegderLegderNo")
	private IdFactory idFactoryTradeLegderLegderNo;

	/**
	 * 创建生效的损益台账
	 */
	@Override
	public String createEffectiveProfitLossLedger(TradeProfitLossLedger ledger) {
		// TODO Auto-generated method stub
		String ledgerNo = TradeUtilCommon.getServiceCode(ledger.getTradeType())
				+ idFactoryTradeLegderLegderNo.generate().toString();
		ledger.setLedgerNo(ledgerNo);// 业务台账编号
		ledger.setStatus(TradeConstants.PROFIT_LOSS_LEDGER_STATUS_EFFECTIVITY); // 台账状态（00：新建
																				// 01生效）
		ledger.setVersion(VERSION);
		// 将创建请求数据，默认为生效的请求数据
		ledger.setCreateReqType(ledger.getEffectiveReqType());// 创建交易请求类型
		ledger.setCreateReqNo(ledger.getEffectiveReqNo());// 创建交易请求编号
		Date created = new Date();
		ledger.setGmtCreated(created);
		ledger.setGmtEffective(created);
		this.tradeProfitLossLedgerService.insertTradeProfitLossLedger(ledger);
		createLegderHistory(ledger);
		return ledgerNo;
	}

	/**
	 * 创建空白的损益台账
	 */
	@Override
	public String createBlankProfitLossLedger(TradeProfitLossLedger ledger) {
		// TODO Auto-generated method stub
		String ledgerNo = TradeUtilCommon.getServiceCode(ledger.getTradeType())
				+ idFactoryTradeLegderLegderNo.generate().toString();
		ledger.setLedgerNo(ledgerNo);// 业务台账编号
		ledger.setStatus(TradeConstants.PROFIT_LOSS_LEDGER_STATUS_INIT); // 台账状态（00：新建
																			// 01生效）
		ledger.setVersion(VERSION);
		Date created = new Date();
		ledger.setGmtCreated(created);
		this.tradeProfitLossLedgerService.insertTradeProfitLossLedger(ledger);
		createLegderHistory(ledger);
		return ledgerNo;
	}

	/**
	 * 空白的损益台账转换为生效的收益台账
	 */
	@Override
	public void updateBlankLegderEffective(TradeProfitLossLedger ledger) {
		// TODO Auto-generated method stub
		// 业务台账生效日期时间 -- 系统当前日期时间
		Date created = new Date();
		ledger.setGmtEffective(created);
		// 台账状态 - 生效
		ledger.setStatus(TradeConstants.PROFIT_LOSS_LEDGER_STATUS_EFFECTIVITY);
		this.tradeProfitLossLedgerService.updateTradeProfitLossLedger(ledger);
		createLegderHistory(ledger);
	}

	/**
	 * 空白的损益台账转换为失效的损益台账
	 */
	@Override
	public void updateBlankLegderFail(TradeProfitLossLedger ledger) {
		// TODO Auto-generated method stub
		Date created = new Date();
		ledger.setGmtFailed(created);
		// 台账状态 - 失败
		ledger.setStatus(TradeConstants.PROFIT_LOSS_LEDGER_STATUS_FAILED);
		this.tradeProfitLossLedgerService.updateTradeProfitLossLedger(ledger);
		createLegderHistory(ledger);
	}

	/**
	 * @Title:createLegderHistory
	 * @Description: 创建损益台账历史记录
	 * @param ledger
	 * @return:void
	 * @author:zoran.huang
	 * @date:2016年4月26日 下午4:46:05
	 */
	private void createLegderHistory(TradeProfitLossLedger ledger) {
		TradeProfitLossLedgerLog log = new TradeProfitLossLedgerLog();
		TradeProfitLossLedger newledger = tradeProfitLossLedgerService
				.queryTradeProfitLossLedgerBy(ledger.getLedgerNo()).get(0);
		BeanUtils.copyProperties(newledger, log);
		log.setId(null);
		tradeProfitLossLedgerLogService.insertTradeProfitLossLedgerLog(log);
	}

	@Override
	public TradeProfitLossLedger queryByLedgerNoAndTradeNo(String ledgerNo,
			String tradeNo) {
		return tradeProfitLossLedgerService.queryByLedgerNoAndTradeNo(ledgerNo, tradeNo);
	}
}
